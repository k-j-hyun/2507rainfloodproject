# 🌊 CREW_SOOM 침수 예측 AI 시스템 - 설치 및 실행 가이드

## 📋 시스템 요구사항

- **Python**: 3.8 이상 (권장: 3.9 ~ 3.11)
- **운영체제**: Windows 10/11, macOS, Linux
- **메모리**: 최소 4GB RAM (권장: 8GB+)
- **디스크 공간**: 최소 2GB 여유 공간

## 🚀 설치 단계

### 1. 프로젝트 클론 또는 다운로드
```bash
# Git 클론 (옵션 1)
git clone https://github.com/your-repo/crew_soom.git
cd crew_soom

# 또는 ZIP 파일 다운로드 후 압축 해제 (옵션 2)
```

### 2. 가상환경 생성 및 활성화
```bash
# 가상환경 생성
python -m venv venv

# 가상환경 활성화
# Windows:
venv\Scripts\activate

# macOS/Linux:
source venv/bin/activate
```

### 3. 필수 패키지 설치
```bash
# 기본 패키지 설치
pip install --upgrade pip
pip install -r requirements.txt

# 한글 폰트 설치 (Windows에서 그래프 한글 깨짐 방지)
# 시스템에 'Malgun Gothic' 폰트가 없는 경우:
# 제어판 → 글꼴 → 맑은 고딕 확인
```

### 4. 환경 변수 설정
```bash
# .env 파일 생성
cp .env.example .env

# .env 파일 편집하여 API 키 설정
# OPENWEATHER_API_KEY=your_actual_api_key_here
```

### 5. 디렉토리 구조 생성
```bash
# 필요한 디렉토리 자동 생성됨 (run.py 실행 시)
# 또는 수동으로 생성:
mkdir -p data/processed data/raw models outputs logs users
```

## 🔑 API 키 발급 (중요!)

### 공공데이터포털 API 키 발급
1. **공공데이터포털 접속**: https://data.go.kr
2. **회원가입 및 로그인**
3. **다음 4개 API 서비스 신청**:
   - 기상청_지상(종관, ASOS) 시간자료 조회서비스
   - 기상청_지상(종관, ASOS) 일자료 조회서비스
   - 기상청_기상특보 조회서비스
   - 기상청_단기예보 ((구)동네예보) 조회서비스

4. **서비스 키 발급** 후 `.env` 파일에 입력

### API 키 없이 실행하는 경우
- 시스템은 시뮬레이션 데이터로 동작
- 실제 기상 데이터는 수집되지 않음
- 모든 기능은 정상 동작

## 🎯 실행 방법

### 1. 기본 실행
```bash
python run.py
```

### 2. 실행 후 접속
- **웹 브라우저**: http://localhost:5000
- **기본 로그인**: admin / 1234

### 3. 시스템 확인
1. 📊 **데이터 로드**: "데이터 로드" 버튼 클릭
2. 🤖 **모델 훈련**: "모델 훈련" 버튼 클릭
3. 🔮 **예측 테스트**: 기상 데이터 입력 후 예측 실행

## 🔧 문제 해결

### 자주 발생하는 오류

#### 1. **Flask/Werkzeug 버전 충돌**
```bash
pip install Flask==2.3.3 Werkzeug==2.3.7
```

#### 2. **한글 폰트 오류 (그래프)**
```python
# Windows에서 한글 폰트 설치 확인
import matplotlib.pyplot as plt
plt.rcParams['font.family'] = 'Malgun Gothic'
```

#### 3. **포트 충돌 (5000번 포트)**
```bash
# 다른 포트 사용 (web_app.py 마지막 줄 수정)
self.app.run(debug=True, host='0.0.0.0', port=5001)
```

#### 4. **메모리 부족**
```bash
# 가벼운 모델 사용 (trainer.py 수정)
n_estimators=50  # 기본값 150에서 50으로 감소
```

#### 5. **API 호출 실패**
- `.env` 파일의 API 키 확인
- 공공데이터포털 서비스 승인 상태 확인
- 인터넷 연결 확인

### 로그 확인
```bash
# 실행 로그 확인
tail -f logs/log_events.json

# 또는 웹에서 확인
# http://localhost:5000/logs
```

## 📂 주요 파일 구조

```
CREW_SOOM/
├── run.py              # 시스템 실행 메인 파일
├── requirements.txt    # 패키지 의존성
├── .env               # 환경 변수 설정
├── modules/           # 핵심 모듈
│   ├── web_app.py     # Flask 웹 애플리케이션
│   ├── multi_weather_api.py  # 4개 API 통합
│   ├── data_loader.py        # 데이터 로더
│   ├── trainer.py            # 모델 훈련
│   └── ...
├── templates/         # HTML 템플릿
├── static/           # CSS, JS 파일
├── data/             # 데이터 저장소
├── models/           # 훈련된 모델
└── outputs/          # 결과 파일
```

## 🎮 사용 방법

### 1. 기본 워크플로우
1. **시스템 시작**: `python run.py`
2. **데이터 로드**: 웹에서 "데이터 로드" 클릭
3. **모델 훈련**: "모델 훈련" 클릭
4. **예측 실행**: 기상 데이터 입력 후 예측

### 2. 고급 기능
- **자동 업데이트**: 1시간마다 실제 API 데이터 수집
- **모델 비교**: 여러 ML 모델 성능 비교
- **시각화**: 5가지 차트 타입 지원
- **지도 기능**: 서울시 구별 위험도 표시

## 🛠️ 개발 환경 설정

### 개발 모드 실행
```bash
# 디버그 모드 활성화
export FLASK_ENV=development
export FLASK_DEBUG=True
python run.py
```

### 테스트 실행
```bash
# 단위 테스트 (추후 구현)
python -m pytest tests/

# 기본 기능 테스트
python -c "from modules.web_app import FloodWebApp; app = FloodWebApp(); print('✅ 시스템 정상')"
```

## 📞 지원 및 문제 보고

### 문제 발생 시 확인사항
1. **Python 버전**: `python --version`
2. **패키지 버전**: `pip list`
3. **로그 파일**: `logs/log_events.json`
4. **에러 메시지**: 전체 스택 트레이스 복사

### 성능 모니터링
- **메모리 사용량**: 작업 관리자에서 Python 프로세스 확인
- **API 호출 상태**: 웹 대시보드에서 실시간 확인
- **데이터 품질**: 시각화 차트에서 확인

## 🔄 업데이트 및 유지보수

### 시스템 업데이트
```bash
# 패키지 업데이트
pip install --upgrade -r requirements.txt

# 데이터 백업
cp data/processed/ML_COMPLETE_DATASET.csv backup/

# 모델 재훈련
# 웹에서 "모델 훈련" 버튼 클릭
```

### 정기 점검사항
- API 키 유효성 (매월)
- 데이터 품질 확인 (주간)
- 모델 성능 모니터링 (주간)
- 로그 파일 정리 (월간)

---

## 🎉 성공적인 설치 확인

시스템이 정상적으로 설치되었다면:

✅ **웹 브라우저**에서 http://localhost:5000 접속 가능  
✅ **대시보드**에서 시스템 상태 확인 가능  
✅ **데이터 로드** 및 **모델 훈련** 성공  
✅ **예측 기능** 정상 동작  
✅ **시각화** 차트 생성 가능  

문제가 있다면 위의 문제 해결 섹션을 참고하세요! 🚀